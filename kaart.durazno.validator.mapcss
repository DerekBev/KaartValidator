meta
{
  title: "Validation rules for Kaart Group--Dwarf Team";
  description: "Validation tool for the Kaart Mexico Project";
  author: "Rd Clare(mr_et) Taylor Smock(vorpalblade77-kaart) Farris Billy(FarieBerrie)";
  version: "15_2020-02-16";
}
/* Creates list of current/past Project Users  */
*[JOSM_search("user:LSkalayo or user:Soccersweeper or user:ArleneC or user:3agleOne or user:\"Unicorn Ostrich\" or user:Goose6thAB or user:\"Chilly Chinchillas\" or user:Cinderblock or user:Dalekokarta or user:BlueRanger or user:MTG5093 or user:MappnMatt or user:MMantlo or user:rallynukab or user:jedimasterflint or user:RobinNoodles or user:Mel_1 or user:Sherbare or user:Smoothdog or user:ImjusBuddy or user:DreadPirateRoberts or user:EthanK or user:Yagni or user:G_Fyyar or user:mr_et or user:FarieBerrie or user:rileywhite97 or user:ikohl or user:spititout or user:nickmettauer or user:The_Intern or user:Meowshane or user:RouteRob or user:Kyleta8 or user:\"El Pescador\" or user:rytheking or user:Ajaie or user:BobGod or user:csjupiter1 or user:GhostEye or user:ArleneC or user:leedlelee or user:\"Leonardo DeMAPrio\" or user:logans127 or user:mapcraft or user:Plutocrats or user:chuck97! or user:Senzubeandealer or user:swells5 or user:notmee-uh or user:Traaker_L or user:yodacodyone1 or user:Dillon9 or user:jacob_kubeczko or user:LSkalayo or user:Traaker_L or user:MTG5093 or user:Zebulonium or user:staysavy")]{
  set .kaart_user
}


/* Double prefix check */
/* Rd Clare */
way[highway][name =~ /(^(?i)(Calle)\s)((?i)(Ampliación|Calle|Cerrada|Privada|Callejón|Prolongación|Avenida|Retorno|Calzada|Circuito|Bulevar|Andador|Boulevard|Camino|Carretera))(\s)/],
way[highway][name =~ /(^(?i)(Ampliación)\s)((?i)(Ampliación))(\s)/],
way[highway][name =~ /(^(?i)(Cerrada)\s)((?i)(Cerrada))(\s)/],
way[highway][name =~ /(^(?i)(Privada)\s)((?i)(Privada))(\s)/],
way[highway][name =~ /(^(?i)(Callejón)\s)((?i)(Callejón))(\s)/],
way[highway][name =~ /(^(?i)(Prolongación)\s)((?i)(Prolongación))(\s)/],
way[highway][name =~ /(^(?i)(Avenida)\s)((?i)(Avenida))(\s)/],
way[highway][name =~ /(^(?i)(Retorno)\s)((?i)(Retorno))(\s)/],
way[highway][name =~ /(^(?i)(Calzada)\s)((?i)(Calzada))(\s)/],
way[highway][name =~ /(^(?i)(Circuito)\s)((?i)(Circuito))(\s)/],
way[highway][name =~ /(^(?i)(Bulevar)\s)((?i)(Bulevar))(\s)/],
way[highway][name =~ /(^(?i)(Andador)\s)((?i)(Andador))(\s)/],
way[highway][name =~ /(^(?i)(Boulevard)\s)((?i)(Boulevard))(\s)/],
way[highway][name =~ /(^(?i)(Camino)\s)((?i)(Camino))(\s)/],
way[highway][name =~ /(^(?i)(Carretera)\s)((?i)(Carretera))(\s)/]{
  throwError: tr("2 or more prefixes found");
  group: tr(kaart_durazno);
}

/*Check for a name enclosed within a parenthesis*/
/* Rd Clare, Farris Billy */
way[highway][name =~ /(?i)\(\w.*\)/]{
throwError: tr("Parenthesis around the name");
group: tr(kaart_durazno);
}

/* Check for Y/O in the name, possibly indicating an alt_name is needed*/
/* Farris Billy */
way[highway][name =~ /\s(?i)(y\/o)]{
throwError: tr("Check for possible alt_name");
group: tr(kaart_durazno);
}

/* abbreviation check */
/* Farris Billy */
way[highway][/^(name|alt_name)$/ =~ /(?i)(^|.* )(And|Arq|Av|Ave|Blvd|Blvrd|Blv|Blv|C|Calz|Cd|Cda|Cjon|Comp|Cto|Diag|Dr|Edo|Esq|Gral|Hda|Ing|Lic|Lit|Mz|Nte|Occ|Ote|Pbro|Pdte|Pre|Priv|Profa|Prof|Prol|Pte|Ret|Sn|Sta|Tte)\.? .*/]{
  group: tr(kaart_durazno);
  throwError: tr("Abbreviation in Name or Alt_name");
}

/* incorrect copy and paste Check? */
/* RD Clare */
way[highway][/^(?i)(Ampliación|Andador|Avenida|Boulevard|Calle|Callejón|Calzada|Camino|Carretera|Cerrada|Circuito|Entrada|Entronque|Escalinata|Peotonal|Privada|Prolongación|Retorno)$/]{
  group: tr(kaart_durazno);
  throwError: tr("Incorrect tag");
}

/* Checks if name and alt_name are equivalent  */
/* Andrew Piechota */
way[highway][name = *alt_name] {
  throwError: tr("Name and alt_name are equivalent");
  group: tr(kaart_durazno);
  fixRemove: "alt_name";
}

/* Checks if links have oneway tag */
/* Taylor Smock */
way[highway][highway=~/^.*_link$/][!oneway]{
  throwError: tr("_links are usually oneway ");
  group: tr(kaart_durazno);
  fixAdd: "oneway=yes";
}

/* Checks oneway tag for yes or no */
/* RD Clare */
way[highway][oneway][oneway !~ /^(yes|no|(-1))$/]{
  throwError: tr("oneway should be yes or no");
  group: tr(kaart_durazno);

}

/* Checks for commas in name/alt_name */
/* Andrew Piechota */
way[highway][/^(name|alt_name)$/ =~ /,/] {
  throwError: tr("Name/alt_name with comma");
  group: tr(kaart_durazno);
}

/* Checks bridges/tunnels for layer tag */
/* Andrew Piechota */
way[/^(tunnel|bridge)$/][/^(tunnel|bridge)$/!~/^no$/][!layer] {
  throwWarning: tr("Bridge/tunnel missing layer tag");
  group: tr(kaart_durazno);
}

/* Checks if roundabouts have the highway = _link tag */
/* RD Clare */
way[highway =~ /^.*_link$/][junction = roundabout] {
  throwWarning: tr("roundabouts are not links");
  group: tr(kaart_durazno);
  suggestAlternative: "non _link or add note";
}

/* Checks if links have name/noname tag */
/* Taylor Smock, Andrew Piechota, RD Clare */
way[highway=~/^.*_link$/][name],
way[highway=~/^.*_link$/][noname] {
  throwError: tr("Links shouldn''t have name/noname tags");
  group: tr(kaart_durazno);
  fixRemove: "noname";
}

/* Checks for noname tag. Will flag if Kaart user is last author and tag exists */
/* RD Clare */
way[highway][noname].kaart_user {
  throwError: tr("Check noname tag added by Kaart user");
  group: tr(kaart_durazno);
  fixRemove: "noname";
}
